{
  "name": "n8n Credential Validation Workflow",
  "nodes": [
    {
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "@n8n/n8n-nodes-base.manualTrigger",
      "position": [200, 300],
      "parameters": {}
    },
    {
      "id": "credential-test-controller",
      "name": "Credential Test Controller",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [400, 300],
      "parameters": {
        "functionCode": "// Credential validation test controller\nconst testResults = {\n  timestamp: new Date().toISOString(),\n  tests: [\n    { name: 'Gmail OAuth2', credential: 'gmail-oauth2-credentials', status: 'pending' },\n    { name: 'Calendar OAuth2', credential: 'google-calendar-oauth2-credentials', status: 'pending' },\n    { name: 'Drive OAuth2', credential: 'google-drive-oauth2-credentials', status: 'pending' },\n    { name: 'Docs OAuth2', credential: 'google-docs-oauth2-credentials', status: 'pending' },\n    { name: 'Telegram Bot', credential: 'telegram-bot-credentials', status: 'pending' }\n  ],\n  summary: {\n    total: 5,\n    passed: 0,\n    failed: 0,\n    pending: 5\n  }\n};\n\n// Start with Gmail test\nreturn [{\n  json: {\n    testSuite: testResults,\n    currentTest: 'gmail',\n    testIndex: 0\n  }\n}];"
      }
    },
    {
      "id": "gmail-test",
      "name": "Test Gmail Credentials",
      "type": "@n8n/n8n-nodes-base.gmail",
      "position": [600, 200],
      "parameters": {
        "operation": "getProfile"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-oauth2-credentials",
          "name": "Gmail OAuth2 Credentials"
        }
      }
    },
    {
      "id": "calendar-test",
      "name": "Test Calendar Credentials",
      "type": "@n8n/n8n-nodes-base.googleCalendar",
      "position": [600, 300],
      "parameters": {
        "operation": "getAll",
        "calendarId": "primary",
        "options": {
          "maxResults": 1
        }
      },
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth2-credentials",
          "name": "Google Calendar OAuth2 Credentials"
        }
      }
    },
    {
      "id": "drive-test",
      "name": "Test Drive Credentials",
      "type": "@n8n/n8n-nodes-base.googleDrive",
      "position": [600, 400],
      "parameters": {
        "operation": "list",
        "options": {
          "fields": "files(id,name)",
          "pageSize": 1
        }
      },
      "credentials": {
        "googleDriveOAuth2": {
          "id": "google-drive-oauth2-credentials",
          "name": "Google Drive OAuth2 Credentials"
        }
      }
    },
    {
      "id": "docs-test",
      "name": "Test Docs Credentials",
      "type": "@n8n/n8n-nodes-base.googleDocs",
      "position": [600, 500],
      "parameters": {
        "operation": "get",
        "documentId": "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
      },
      "credentials": {
        "googleDocsOAuth2": {
          "id": "google-docs-oauth2-credentials",
          "name": "Google Docs OAuth2 Credentials"
        }
      }
    },
    {
      "id": "telegram-test",
      "name": "Test Telegram Credentials",
      "type": "@n8n/n8n-nodes-base.telegram",
      "position": [600, 600],
      "parameters": {
        "operation": "getMe"
      },
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot Credentials"
        }
      }
    },
    {
      "id": "gmail-success-processor",
      "name": "Gmail Success Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [800, 200],
      "parameters": {
        "functionCode": "// Process Gmail test success\nconst testSuite = $('Credential Test Controller').first().json.testSuite;\nconst emailAddress = $json.emailAddress;\n\n// Update test results\ntestSuite.tests[0].status = 'passed';\ntestSuite.tests[0].result = `Connected as ${emailAddress}`;\ntestSuite.summary.passed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    currentTest: 'calendar',\n    testIndex: 1,\n    lastResult: 'Gmail credentials validated successfully'\n  }\n}];"
      }
    },
    {
      "id": "calendar-success-processor",
      "name": "Calendar Success Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [800, 300],
      "parameters": {
        "functionCode": "// Process Calendar test success\nconst testSuite = $('Gmail Success Processor').first().json.testSuite;\nconst events = $json.length || 0;\n\n// Update test results\ntestSuite.tests[1].status = 'passed';\ntestSuite.tests[1].result = `Calendar accessible, ${events} events found`;\ntestSuite.summary.passed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    currentTest: 'drive',\n    testIndex: 2,\n    lastResult: 'Calendar credentials validated successfully'\n  }\n}];"
      }
    },
    {
      "id": "drive-success-processor",
      "name": "Drive Success Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [800, 400],
      "parameters": {
        "functionCode": "// Process Drive test success\nconst testSuite = $('Calendar Success Processor').first().json.testSuite;\nconst files = $json.files?.length || 0;\n\n// Update test results\ntestSuite.tests[2].status = 'passed';\ntestSuite.tests[2].result = `Drive accessible, ${files} files found`;\ntestSuite.summary.passed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    currentTest: 'docs',\n    testIndex: 3,\n    lastResult: 'Drive credentials validated successfully'\n  }\n}];"
      }
    },
    {
      "id": "docs-success-processor",
      "name": "Docs Success Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [800, 500],
      "parameters": {
        "functionCode": "// Process Docs test success\nconst testSuite = $('Drive Success Processor').first().json.testSuite;\nconst docTitle = $json.title || 'Unknown document';\n\n// Update test results\ntestSuite.tests[3].status = 'passed';\ntestSuite.tests[3].result = `Docs accessible, read: ${docTitle}`;\ntestSuite.summary.passed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    currentTest: 'telegram',\n    testIndex: 4,\n    lastResult: 'Docs credentials validated successfully'\n  }\n}];"
      }
    },
    {
      "id": "telegram-success-processor",
      "name": "Telegram Success Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [800, 600],
      "parameters": {
        "functionCode": "// Process Telegram test success\nconst testSuite = $('Docs Success Processor').first().json.testSuite;\nconst botName = $json.username || 'Unknown bot';\n\n// Update test results\ntestSuite.tests[4].status = 'passed';\ntestSuite.tests[4].result = `Bot connected: @${botName}`;\ntestSuite.summary.passed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    testComplete: true,\n    lastResult: 'Telegram credentials validated successfully'\n  }\n}];"
      }
    },
    {
      "id": "error-processor",
      "name": "Error Processor",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [1000, 400],
      "parameters": {
        "functionCode": "// Process credential test errors\nconst error = $json.error || 'Unknown error';\nconst errorSource = $json.node || 'Unknown node';\n\n// Determine which test failed based on error source\nlet testIndex = 0;\nif (errorSource.includes('Calendar')) testIndex = 1;\nelse if (errorSource.includes('Drive')) testIndex = 2;\nelse if (errorSource.includes('Docs')) testIndex = 3;\nelse if (errorSource.includes('Telegram')) testIndex = 4;\n\n// Get test suite from last successful state or initialize\nlet testSuite;\ntry {\n  testSuite = $('Credential Test Controller').first().json.testSuite;\n} catch {\n  testSuite = {\n    timestamp: new Date().toISOString(),\n    tests: [\n      { name: 'Gmail OAuth2', credential: 'gmail-oauth2-credentials', status: 'pending' },\n      { name: 'Calendar OAuth2', credential: 'google-calendar-oauth2-credentials', status: 'pending' },\n      { name: 'Drive OAuth2', credential: 'google-drive-oauth2-credentials', status: 'pending' },\n      { name: 'Docs OAuth2', credential: 'google-docs-oauth2-credentials', status: 'pending' },\n      { name: 'Telegram Bot', credential: 'telegram-bot-credentials', status: 'pending' }\n    ],\n    summary: { total: 5, passed: 0, failed: 0, pending: 5 }\n  };\n}\n\n// Update failed test\ntestSuite.tests[testIndex].status = 'failed';\ntestSuite.tests[testIndex].error = error;\ntestSuite.summary.failed += 1;\ntestSuite.summary.pending -= 1;\n\nreturn [{\n  json: {\n    testSuite: testSuite,\n    testFailed: true,\n    failedTest: testSuite.tests[testIndex].name,\n    error: error\n  }\n}];"
      }
    },
    {
      "id": "final-report",
      "name": "Generate Final Report",
      "type": "@n8n/n8n-nodes-base.function",
      "position": [1200, 500],
      "parameters": {
        "functionCode": "// Generate final credential validation report\nlet testSuite;\n\n// Get test suite from the most recent processor\nif ($json.testComplete) {\n  testSuite = $json.testSuite;\n} else if ($json.testFailed) {\n  testSuite = $json.testSuite;\n} else {\n  // Fallback to controller data\n  testSuite = $('Credential Test Controller').first().json.testSuite;\n}\n\n// Calculate completion percentage\nconst completionPercentage = Math.round((testSuite.summary.passed / testSuite.summary.total) * 100);\n\n// Generate detailed report\nconst report = {\n  timestamp: testSuite.timestamp,\n  testSummary: {\n    total: testSuite.summary.total,\n    passed: testSuite.summary.passed,\n    failed: testSuite.summary.failed,\n    pending: testSuite.summary.pending,\n    completionPercentage: completionPercentage,\n    overallStatus: testSuite.summary.failed === 0 ? 'SUCCESS' : 'PARTIAL_FAILURE'\n  },\n  testDetails: testSuite.tests.map(test => ({\n    name: test.name,\n    credential: test.credential,\n    status: test.status,\n    result: test.result || test.error || 'Not executed',\n    statusIcon: test.status === 'passed' ? '✅' : test.status === 'failed' ? '❌' : '⏳'\n  })),\n  recommendations: [],\n  nextSteps: []\n};\n\n// Add recommendations based on results\nif (testSuite.summary.failed > 0) {\n  report.recommendations.push('Review failed credential configurations in n8n');\n  report.recommendations.push('Verify OAuth2 scopes in Google Cloud Console');\n  report.recommendations.push('Check redirect URIs match n8n instance URL');\n}\n\nif (testSuite.summary.passed === testSuite.summary.total) {\n  report.nextSteps.push('All credentials validated - ready to import workflows');\n  report.nextSteps.push('Test Telegram Bot commands with actual workflows');\n  report.nextSteps.push('Configure authorized user IDs in workflow security');\n} else {\n  report.nextSteps.push('Fix failed credential configurations before proceeding');\n  report.nextSteps.push('Re-run validation after fixing issues');\n}\n\n// Generate formatted report text\nconst reportText = `# n8n Credential Validation Report\\n\\n` +\n  `**Timestamp**: ${report.timestamp}\\n` +\n  `**Overall Status**: ${report.testSummary.overallStatus}\\n` +\n  `**Completion**: ${report.testSummary.completionPercentage}% (${report.testSummary.passed}/${report.testSummary.total})\\n\\n` +\n  `## Test Results\\n\\n` +\n  report.testDetails.map(test => \n    `${test.statusIcon} **${test.name}**: ${test.result}`\n  ).join('\\n') + '\\n\\n' +\n  (report.recommendations.length > 0 ? \n    `## Recommendations\\n\\n${report.recommendations.map(r => `- ${r}`).join('\\n')}\\n\\n` : '') +\n  `## Next Steps\\n\\n${report.nextSteps.map(s => `- ${s}`).join('\\n')}`;\n\nreturn [{\n  json: {\n    validationReport: report,\n    reportText: reportText,\n    success: report.testSummary.overallStatus === 'SUCCESS'\n  }\n}];"
      }
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Credential Test Controller",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Credential Test Controller": {
      "main": [
        [
          {
            "node": "Test Gmail Credentials",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Calendar Credentials",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Drive Credentials",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Docs Credentials",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Telegram Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Gmail Credentials": {
      "main": [
        [
          {
            "node": "Gmail Success Processor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Calendar Credentials": {
      "main": [
        [
          {
            "node": "Calendar Success Processor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Drive Credentials": {
      "main": [
        [
          {
            "node": "Drive Success Processor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Docs Credentials": {
      "main": [
        [
          {
            "node": "Docs Success Processor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Telegram Credentials": {
      "main": [
        [
          {
            "node": "Telegram Success Processor",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Success Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Success Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Drive Success Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Docs Success Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Success Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Processor": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [
    {
      "createdAt": "2025-07-07T07:45:00.000Z",
      "updatedAt": "2025-07-07T07:45:00.000Z",
      "id": "credential-validation",
      "name": "credential-validation"
    }
  ],
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "credential-validation-workflow",
  "versionId": "1"
}