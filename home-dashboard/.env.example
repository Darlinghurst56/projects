# =============================================================================
# Home Dashboard Environment Configuration Template
# =============================================================================
# 
# Copy this file to .env and configure the values for your environment.
# SECURITY WARNING: Never commit .env files with real secrets to version control!
#
# Infrastructure Context:
# - Development: localhost development environment
# - Production: 192.168.1.74 (family server with Ollama, Docker, services)
# - Family Access: Windows/iOS devices on local network
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Backend API server port
PORT=3000

# Frontend development server port (Vite)
CLIENT_PORT=3003

# Node environment: development, production, or test
NODE_ENV=development

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================

# n8n Workflow Automation Service
# Used for family automation workflows and integrations
N8N_URL=http://192.168.1.74:5678

# Ollama AI Service
# Local AI for family assistant chat functionality
# Use localhost for local development, or specify remote server for production
# Examples: http://localhost:11434 or http://192.168.1.74:11434
OLLAMA_URL=http://localhost:11434

# =============================================================================
# GOOGLE API CONFIGURATION
# =============================================================================
# 
# Required for Google Calendar, Gmail, and Drive integration
# Get credentials from: https://console.developers.google.com/
# 
# Setup Instructions:
# 1. Create a new project or select existing project
# 2. Enable Google Calendar API, Gmail API, and Google Drive API
# 3. Create OAuth 2.0 credentials (Web application)
# 4. Add authorized redirect URIs

# Google OAuth Client ID (from Google Cloud Console)
GOOGLE_CLIENT_ID=your-google-client-id-here.apps.googleusercontent.com

# Google OAuth Client Secret (from Google Cloud Console)
GOOGLE_CLIENT_SECRET=your-google-client-secret-here

# OAuth Redirect URI - must match Google Cloud Console configuration
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/google/callback

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT Secret for token signing - MUST be secure in production!
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=development-jwt-secret-key-change-in-production

# JWT token expiration time
JWT_EXPIRES_IN=24h

# Default PIN for family access (4-6 digits recommended)
DEFAULT_PIN=1234

# Maximum PIN attempt failures before lockout
PIN_ATTEMPTS=5

# PIN lockout duration in milliseconds (15 minutes)
PIN_LOCKOUT_DURATION=900000

# Session timeout in milliseconds (30 minutes)
SESSION_TIMEOUT=1800000

# =============================================================================
# DNS MONITORING
# =============================================================================

# How often to refresh DNS monitoring data (milliseconds)
DNS_REFRESH_INTERVAL=60000

# Maximum acceptable DNS latency in milliseconds
DNS_LATENCY_THRESHOLD=100

# Minimum uptime percentage for DNS health
DNS_UPTIME_THRESHOLD=99.5

# =============================================================================
# CONTROL D CONFIGURATION
# =============================================================================

# Control D API configuration for DNS protection status
# Get API key from: https://dash.controld.com/

# Control D API key (optional - uses public endpoints for status detection)
CONTROLD_API_KEY=your-controld-api-key-here

# Control D API base URL
CONTROLD_API_BASE=https://api.controld.com/v1

# Control D detection cache timeout (milliseconds)
CONTROLD_CACHE_TIMEOUT=300000

# Control D test endpoints for resolver verification
CONTROLD_TEST_DOMAIN=test.controld.com
CONTROLD_BLOCK_TEST_DOMAIN=block-test.controld.com

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================

# WebSocket server port (for real-time updates)
WS_PORT=3003

# WebSocket heartbeat interval (milliseconds)
WS_HEARTBEAT_INTERVAL=30000

# Maximum concurrent WebSocket connections
WS_MAX_CONNECTIONS=100

# =============================================================================
# SECURITY & CORS
# =============================================================================

# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=http://localhost,http://localhost:3003,http://localhost:4000

# Rate limiting window in milliseconds (15 minutes)
RATE_LIMIT_WINDOW=900000

# Maximum requests per rate limit window
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level: error, warn, info, http, verbose, debug, silly
LOG_LEVEL=info

# Log file path (relative to project root)
LOG_FILE=./logs/dashboard.log

# Maximum number of log files to keep
LOG_MAX_FILES=5

# Maximum size per log file
LOG_MAX_SIZE=10m

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable/disable major features (true/false)

# DNS monitoring widget and functionality
FEATURE_DNS_MONITORING=true

# Google Calendar, Gmail, Drive integration
FEATURE_GOOGLE_INTEGRATION=true

# AI chat functionality (requires Ollama)
FEATURE_AI_CHAT=true

# Dashy dashboard integration
FEATURE_DASHY_INTEGRATION=true

# PIN-based authentication
FEATURE_PIN_AUTH=true

# Google OAuth authentication
FEATURE_GOOGLE_AUTH=true

# =============================================================================
# DEVELOPMENT OPTIONS
# =============================================================================

# Use mock data instead of real APIs (development only)
MOCK_DATA=false

# Enable debug mode (verbose logging, stack traces)
DEBUG=false

# Enable hot reload for development
HOT_RELOAD=true

# Extra verbose logging for debugging
VERBOSE_LOGGING=false

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
#
# When deploying to production (192.168.1.74):
# 1. Copy this file to .env
# 2. Generate secure JWT_SECRET
# 3. Set NODE_ENV=production
# 4. Configure Google OAuth redirect URIs
# 5. Set DEBUG=false and VERBOSE_LOGGING=false
# 6. Review and adjust rate limits and timeouts
#
# =============================================================================